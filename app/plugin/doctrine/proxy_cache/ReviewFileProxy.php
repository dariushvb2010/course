<?php

namespace CustomsReview\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class ReviewFileProxy extends \ReviewFile implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function ID()
    {
        $this->__load();
        return parent::ID();
    }

    public function Cotag()
    {
        $this->__load();
        return parent::Cotag();
    }

    public function setCotag($value)
    {
        $this->__load();
        return parent::setCotag($value);
    }

    public function CreateTime()
    {
        $this->__load();
        return parent::CreateTime();
    }

    public function FinishTimestamp()
    {
        $this->__load();
        return parent::FinishTimestamp();
    }

    public function FinishTime()
    {
        $this->__load();
        return parent::FinishTime();
    }

    public function SetFinishTime($time)
    {
        $this->__load();
        return parent::SetFinishTime($time);
    }

    public function Progress()
    {
        $this->__load();
        return parent::Progress();
    }

    public function GetClass()
    {
        $this->__load();
        return parent::GetClass();
    }

    public function SetClass($c)
    {
        $this->__load();
        return parent::SetClass($c);
    }

    public function Gatecode()
    {
        $this->__load();
        return parent::Gatecode();
    }

    public function State()
    {
        $this->__load();
        return parent::State();
    }

    public function SetState($value)
    {
        $this->__load();
        return parent::SetState($value);
    }

    public function Dossier()
    {
        $this->__load();
        return parent::Dossier();
    }

    public function Alarm()
    {
        $this->__load();
        return parent::Alarm();
    }

    public function Stock()
    {
        $this->__load();
        return parent::Stock();
    }

    public function SetStock(\FileStock $Stock)
    {
        $this->__load();
        return parent::SetStock($Stock);
    }

    public function Finish()
    {
        $this->__load();
        return parent::Finish();
    }

    public function LastProgress($Type = 'all', $IsProcess = false)
    {
        $this->__load();
        return parent::LastProgress($Type, $IsProcess);
    }

    public function LLP($Type = 'all', $IsProcess = false)
    {
        $this->__load();
        return parent::LLP($Type, $IsProcess);
    }

    public function LastReviewer()
    {
        $this->__load();
        return parent::LastReviewer();
    }

    public function LastReview()
    {
        $this->__load();
        return parent::LastReview();
    }

    public function AllProgress()
    {
        $this->__load();
        return parent::AllProgress();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'ID', 'Cotag', 'CreateTimestamp', 'FinishTimestamp', 'Progress', 'Class', 'Gatecode', 'State', 'Dossier', 'Alarm', 'Stock');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}
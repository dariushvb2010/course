<?php

namespace CustomsReview\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class MyUserProxy extends \MyUser implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function ID()
    {
        $this->__load();
        return parent::ID();
    }

    public function Firstname()
    {
        $this->__load();
        return parent::Firstname();
    }

    public function Lastname()
    {
        $this->__load();
        return parent::Lastname();
    }

    public function State()
    {
        $this->__load();
        return parent::State();
    }

    public function Enabled()
    {
        $this->__load();
        return parent::Enabled();
    }

    public function SetState($State)
    {
        $this->__load();
        return parent::SetState($State);
    }

    public function Group()
    {
        $this->__load();
        return parent::Group();
    }

    public function SetGroup($Group)
    {
        $this->__load();
        return parent::SetGroup($Group);
    }

    public function isReviewer()
    {
        $this->__load();
        return parent::isReviewer();
    }

    public function Progress()
    {
        $this->__load();
        return parent::Progress();
    }

    public function AlarmFree()
    {
        $this->__load();
        return parent::AlarmFree();
    }

    public function AddAlarmFree($AlarmFree)
    {
        $this->__load();
        return parent::AddAlarmFree($AlarmFree);
    }

    public function ConfigAlarm()
    {
        $this->__load();
        return parent::ConfigAlarm();
    }

    public function AddConfigAlarm(\ConfigAlarm $ConfigAlarm)
    {
        $this->__load();
        return parent::AddConfigAlarm($ConfigAlarm);
    }

    public function ChildAlarm()
    {
        $this->__load();
        return parent::ChildAlarm();
    }

    public function Setting()
    {
        $this->__load();
        return parent::Setting();
    }

    public function MainSetting()
    {
        $this->__load();
        return parent::MainSetting();
    }

    public function LegalGroups()
    {
        $this->__load();
        return parent::LegalGroups();
    }

    public function getFullName()
    {
        $this->__load();
        return parent::getFullName();
    }

    public function Username()
    {
        $this->__load();
        return parent::Username();
    }

    public function Password()
    {
        $this->__load();
        return parent::Password();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'ID', 'Username', 'Password', 'Email', 'PasswordChangeTimestamp', 'TemporaryResetPassword', 'TemporaryResetPasswordTimeout', 'LastLoginTimestamp', 'FailedLoginAttempts', 'LockTimeout', 'Activated', 'CreateTimestamp', 'Firstname', 'Lastname', 'State', 'Group', 'isReviewer', 'Progress', 'AlarmFree', 'ConfigAlarm', 'ChildAlarm', 'Setting');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}